from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram.types import Message, CallbackQuery

from bot_menu.menu import create_inline_kb, viewing_aphorisms_kb
from create_bot import bot
from data_base.orm import add_aphorisms_bd, add_admin_bd, del_admin_bd, get_all_aphorisms, deleting_aphorisms_kb
from handlers.filters import AdminUser

router: Router = Router()
router.message.filter(AdminUser())
router.callback_query.filter(AdminUser())

class FSMaphorisms(StatesGroup):
    aphorisms = State()
    autor = State()
    admin = State()
    admin_del = State()


@router.message(F.text == '/menu')
async def menu_admin(message: Message):
    await message.answer(text='üîΩ–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüîΩ',
                         reply_markup=await create_inline_kb(2,
                                                       'admin_menu',
                                                       '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                       '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                                                       '–î–æ–±–∞–≤–∏—Ç—å –∞—Ñ–æ—Ä–∏–∑–º',
                                                       '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ñ–æ—Ä–∏–∑–º–æ–≤'
                                                       ))


'''–î–æ–±–∞–≤–ª—è–µ–º –∞—Ñ–æ—Ä–∏–∑–º'''

@router.callback_query(F.data.endswith('–î–æ–±–∞–≤–∏—Ç—å –∞—Ñ–æ—Ä–∏–∑–º'))
async def add_aphorisms(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ñ–æ—Ä–∏–∑–º –±–æ—Ç—É')
    await state.set_state(FSMaphorisms.aphorisms)
    await callback.answer()


'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ñ–æ—Ä–∏–∑–º–∞'''
@router.message(StateFilter(FSMaphorisms.aphorisms))
async def enter_aphorisms(message: Message, state: FSMContext):
    if message.text:
        await message.answer(text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∞—Ñ–æ—Ä–∏–∑–º–∞ –±–æ—Ç—É')
        await state.update_data(aphorisms=message.text)
        await state.set_state(FSMaphorisms.autor)
    else:
        await message.answer(text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∞—Ñ–æ—Ä–∏–∑–º–∞'''
@router.message(StateFilter(FSMaphorisms.autor))
async def enter_aphorisms_autor(message: Message, state: FSMContext):
    if message.text:
        aphorisms = await state.get_data()
        await add_aphorisms_bd(name=aphorisms['aphorisms'], autor=message.text)
        await state.clear()
    else:
        await message.answer(text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''


@router.callback_query(F.data.endswith('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
async def add_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FSMaphorisms.admin)
    await callback.message.answer(text='–ü—Ä–∏—à–ª–∏ ID-—Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await callback.answer()


'''–í–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'''
@router.message(StateFilter(FSMaphorisms.admin))
async def enter_admin(message: Message, state: FSMContext):
    if message.text.isdigit():
        id = int(message.text)
        add = await add_admin_bd(tg_id=id)
        if add:
            await message.answer(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')

    elif message.forward_date:
        id = int(message.forward_from.id)
        add = await add_admin_bd(tg_id=id)
        if add:
            await message.answer(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()
    else:
        await message.answer(text='–ü—Ä–∏—à–ª–∏ ID-—Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')



'''—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''


@router.callback_query(F.data.endswith('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
async def add_admin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FSMaphorisms.admin_del)
    await callback.message.answer(text='–ü—Ä–∏—à–ª–∏ ID-—Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await callback.answer()


'''–í–∫–ª—é—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'''
@router.message(StateFilter(FSMaphorisms.admin))
async def enter_admin(message: Message, state: FSMContext):
    if message.text.isdigit():
        id = int(message.text)
        add = await del_admin_bd(tg_id=id)
        if add:
            await message.answer(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')

    elif message.forward_date:
        id = int(message.forward_from.id)
        add = await del_admin_bd(tg_id=id)
        if add:
            await message.answer(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω')
        else:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        await state.clear()
    else:
        await message.answer(text='–ü—Ä–∏—à–ª–∏ ID-—Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –±–æ—Ç—É –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ')


'''–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ñ–æ—Ä–∏–∑–º–æ–≤'''


@router.callback_query(F.data.endswith('–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ñ–æ—Ä–∏–∑–º–æ–≤'))
async def viewing_aphorisms(callback: CallbackQuery, state: FSMContext):
    all_aphorisms = await get_all_aphorisms()
    if all_aphorisms:
        id_aphorisms = all_aphorisms[0][0]
        name = all_aphorisms[0][1]
        autor = all_aphorisms[0][2]
        await callback.message.answer(text=f'{name}\n\n'
                                                    f'<b><i>{autor}</i></b>',
                                      reply_markup= await viewing_aphorisms_kb(id_aphorisms=id_aphorisms,
                                                                               items=0,
                                                                               len_ap=len(all_aphorisms)))
    else:
        await callback.message.answer(text='–í –±–∞–∑–µ –Ω–µ—Ç –∞—Ñ–æ—Ä–∏–∑–º–æ–≤')
    await callback.answer()


'''–ù–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞—Ñ–æ—Ä–∏–∑–º–æ–≤'''
@router.callback_query(F.data.startswith('viewing_'))
async def enter_button_viewing(callback: CallbackQuery):
    action = callback.data.split('_')[-1]
    all_aphorisms = await get_all_aphorisms()
    items = int(callback.data.split('_')[1])
    if all_aphorisms:
        if action == 'back':
            if items > 0:
                id_aphorisms = all_aphorisms[items-1][0]
                name = all_aphorisms[items-1][1]
                autor = all_aphorisms[items-1][2]
                await bot.edit_message_text(chat_id=callback.from_user.id,
                                            message_id=callback.message.message_id,
                                            text=f'{name}\n\n'
                                                   f'<b><i>{autor}</i></b>',
                                            reply_markup=await viewing_aphorisms_kb(id_aphorisms=id_aphorisms,
                                                                                    items=items-1,
                                                                                    len_ap=len(all_aphorisms)))
        elif action == 'forward':
            if items < len(all_aphorisms)-1:
                id_aphorisms = all_aphorisms[items+1][0]
                name = all_aphorisms[items+1][1]
                autor = all_aphorisms[items+1][2]
                await bot.edit_message_text(chat_id=callback.from_user.id,
                                            message_id=callback.message.message_id,
                                            text=f'{name}\n\n'
                                                 f'<b><i>{autor}</i></b>',
                                            reply_markup=await viewing_aphorisms_kb(id_aphorisms=id_aphorisms,
                                                                                    items=items + 1,
                                                                                    len_ap=len(all_aphorisms)))
    else:
        await callback.message.answer(text='–í –±–∞–∑–µ –Ω–µ—Ç –∞—Ñ–æ—Ä–∏–∑–º–æ–≤')
    await callback.answer()

'''–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ñ–æ—Ä–∏–∑–º–æ–≤'''
@router.callback_query(F.data.startswith('delite_'))
async def delete_aphorisms(callback: CallbackQuery):
    id_aphorisms = callback.data.split('_')[1]
    check_del = await deleting_aphorisms_kb(id_aphorism=int(id_aphorisms))

    if check_del:
        all_aphorisms = await get_all_aphorisms()
        items = int(callback.data.split('_')[-1])
        if items >= len(all_aphorisms):
            items -= 1
        id_aphorisms = all_aphorisms[0][0]
        name = all_aphorisms[items][1]
        autor = all_aphorisms[items][2]
        await bot.edit_message_text(chat_id=callback.from_user.id,
                                    message_id=callback.message.message_id,
                                    text=f'{name}\n\n'
                                         f'<b><i>{autor}</i></b>',
                                    reply_markup=await viewing_aphorisms_kb(id_aphorisms=id_aphorisms,
                                                                            items=items,
                                                                            len_ap=len(all_aphorisms)))
    else:
        await callback.message.answer(text='–ê—Ñ–æ—Ä–∏–∑–º —É–∂–µ —É–¥–∞–ª–µ–Ω')